system_prompt: |
  あなたの回答はcontext内の`@@processing@@`と置換されます。
  前後の文章（テキスト）との整合性を合わせ、テキストを出力してください。
  
  Rule:
   - `@@processing@@`は貴方の解答に含めないでください。
   - 解説や説明、返事を含めず、user promptに直接回答してください。
  {attrs_rules}

user_prompt: |
  # Wikipedia Resources:

  {wikipedia_resources}
  ---
  
  # Context:
  {context}
  
  ---  
  
  # User prompt:
  {prompt}

# hook:
#  text_generate_end: |
#    powershell.exe "Import-Module BurntToast; New-BurntToastNotification -Text 'テキスト生成し終わりました', '{filepath}を確認してください'"

attrs:
  # recommend:
  #   -> List[str] styles
  # but you can use "str".
  bullet:
    - "箇条書きで出力する。"
    - "Markdownの段落が上下にあるときは、そのMarkdownの段落に合わせること。"
  remain: 
    - "user promptを`> `付きで残す。"
    - "ただし、contextは削除する。"
  detail: "出来るだけ詳しく説明する"
  talking: 
    - "会話劇として出力する。"
    - "例: A「こんにちは」\n B「どうも、こんにちは！」"
  academic: "学術的な記述で出力する"

history:
  file: "./{filename}.history.md"
  template: |
    ---
    **Prompt**: 
    {prompt}
    **Result**: 
    {result}
    **Timestamp**: 
    {timestamp}

target:
  - "*.md"
  - "*.markdown"

ignore:
  - "CHANGELOG.md"
  - "README.md"
  - "getstart.md"
  - "README_ja.md"
  - "README_en.md"
  - ".git"

tags:
  - tag: "rewrite"
    format: "次の文章を書きなおしてください: {prompt}"
  - tag: "whatif"
    format: "次の文章に関して、「そうである」と仮定した場合に出てくる帰結を、羅列してみてください: {prompt}"
  - tag: "question"
    format: |
      次の文章に疑問を投げかける疑問文を作成し、<whatif:remain></whatif>で囲みなさい
      例「もし彼が〇〇ではないとしたら？」:
      {prompt}
  - tag: "summary"
    format: "文章全体を要約する"
  - tag: "dictionary"
    format: "次の文・単語の意味を調べてください: {prompt}"
    change: "chat"
  - tag: "emoji"
    format: "Unicodeのemojiにして: {prompt}"
    change: "chat"
  - tag: "synonym"
    format: "次の文・単語の類義語を3つ挙げて、区切りで区切ってください: {prompt}"
    change: "chat"
  - tag: "rephrase"
    format: "次の文・単語を自然な言い回しに変えてください: {prompt}"
    change: "chat"
  - tag: "example"
    format: "次の具体例を挙げてください: {prompt}"
    change: "prompt"

config:
  # duplicate prompt check
  # -> 以前と同じプロンプトが入ってきたら実行しない
  # -> これは、auto saveに対応しているエディタでUndoすると同じプロンプトが何度も発行されるため
  duplicate_prompt: true
  # simple merge
  # -> 2回目以降のファイルに`@@processing@@`があった場合、前回の結果を挟み込む
  simple_merge: true
  # hot reload yaml
  # -> 自身の設定ファイルの変更を検知し、変更があった場合はhot reloadする
  hot_reload_yaml: true
  # verbose print
  # -> 詳細な出力をする
  verbose_print: true